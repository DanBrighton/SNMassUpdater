#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 9894afa0-8509-4c66-80ca-7d49e1203510
# Source File: SNMassGroupUpdateTool.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
WQIAAB+LCAAAAAAABACFUtFOwjAUfSfhH5Y+moxtCMji6IMhIzyAhk1fTe3u3LRrl7ZD8Ovt1mEg
any57WnvPSfntNEOqNiDPC6JJng4cJzoQYo3oNpJjpwWUvDyE7IFiglTgLrDuGQa5AJdjWoV3La1
sktml+BQsW6Td1WZak8KYPVIHzTqhIzUE0hVCo7HoyDyTqC/MyqwXuJwHk5ITnx3PvVDd0JnM3fu
U+LeZJMQgrF/PQ38yOub+9HeQXqsAZvLc3giFywzco53rqZ60EPnrimZce4jnGgidVO3ZqzWX51O
UhDZxpXKxqS1gxwkcApxw6k25hZozffiHdwVEy+EPZuwELZ71Sb3D/svfEkhPtwNKXksZGX4coRP
qH2BC0ILrM3vWCy6l+VryQlrG7akApxsN0SplRRN/VhnREMqBDOMtZmKvB/tw0HkXXylL4kaPQ5Z
AgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2021 v5.8.194
     Generated on:       4/10/2021 11:22 AM
     Generated by:       daniel.brighton
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2021
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YQAAAB+LCAAAAAAABACzCUpNzi9LLap0SSxJVAAyijPz82yVjPWMlOx4uRQUbPyLMtMz8xJz3DJz
Uv0Sc1PtgksSi0pKC/QKiott9DFkebls9JGNtAMAXtMIOWEAAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
    <#
        .SYNOPSIS
            The Main function starts the project application.
        
        .PARAMETER Commandline
            $Commandline contains the complete argument string passed to the script packager executable.
        
        .NOTES
            Use this function to initialize your script and to call GUI forms.
            
        .NOTES
            To get the console output in the Packager (Forms Engine) use: 
            $ConsoleOutput (Type: System.Collections.ArrayList)
    #>
        Param ([String]$Commandline)
            
        #--------------------------------------------------------------------------
        #TODO: Add initialization script here (Load modules and check requirements)
        
        
        #--------------------------------------------------------------------------
        
        if((Show-MainForm_psf) -eq 'OK')
        {
            
        }
        
        $script:ExitCode = 0 #Set the exit code for the Packager
    }
    
    
    #endregion Source: Startup.pss
    
    #region Source: Globals.ps1
        #--------------------------------------------
        # Declare Global Variables and Functions here
        #--------------------------------------------
        #Set Version of ServiceNow
        $script:baseServiceNowURL = ""
        $proxyNetwork1 = ""
        $proxyNetwork2 = ""
        $proxyTarget = ""
        
        $servicename = "SNMassGroupUpdateTool"
        $script:Version = "0.9"
        Set-ItemProperty -path "SOFTWARE\WOW6432Node\DoE\$servicename" -Name "Version" -Value "$script:Version"
        
        #Setting bypass Proxy for the script when on the DoE network
        $network = Get-NetConnectionProfile
        if (($network.name -like $proxyNetwork1) -or ($network.name -like $proxyNetwork2))
        {
            [system.net.webrequest]::defaultwebproxy = new-object system.net.webproxy($proxyTarget)
            [system.net.webrequest]::defaultwebproxy.credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials
            
        }
        
        #declare and zero out variables
        $script:WebSession = $null
        $script:WebHeaders = $null
        $script:LoggedInAs = $null
        $script:XUserToken = $null
        $script:JSESSIONID = $null
        $script:FilterFN = $null
        $script:FilterSN = $null
        $script:FilterIG = $null
        $script:FilterCL = $null
        $script:Locations = [System.Collections.ArrayList]@()
        $script:Computers = [System.Collections.ArrayList]@()
        $script:ChangeArray = [System.Collections.ArrayList]@()
        <#$script:EmptyComputer = @{
            "result" = @{
                "name" = "Error"
                "serial_number" = ""
                "u_intune_assignment_groups" = ""
                "CustomLocation"			 = "Failed to get unique value"
                "sys_id" = ""
                
            }
            
        }#>
        
        #Signs into ServiceNow with passed in Username and Password, saving the Token and Header to the $script:WebSession and $script:WebHeaders variables, returning a 1 if successful and a 0 if fail
        function ServiceNowSetup ($User, $pass)
        {
            #$User = "user.name"
            #$pass = "Pa55w0rd"
            Write-Host "Step 1"
            $cookie = New-Object System.Net.Cookie
            
            $html = Invoke-RestMethod $script:baseServiceNowURL -SessionVariable 'SessionSN'
            
            #Find ADFS url
            $Regex = [Regex]::new("(?<=top.location.href = ')(.*)(?=')")
            $ADFSSAMLURL = $Regex.Match($html).value
            
            #Find Sysparm url
            $Regex = [Regex]::new("(<input.*?(?:name=\""sysparm_referring_url\"".*?value=\""([^\""]+))[^>]*>)")
            $groups = $Regex.Match($html)
            $auth_redirect = $groups.Groups.Item(2).value
            $sysparm_referring_url = $script:baseServiceNowURL + $auth_redirect
            
            #Find X-UserToken
            $Regex = [Regex]::new("(?<=var g_ck = ')(.*)(?=')")
            $XUserToken = $Regex.Match($html).value
            
            # Step 2
            #Get https://educationtastest.service-now.com/api/now/ui/date_time/legacy
            Write-Host "Step 2"
            $headers = @{ "X-UserToken" = $XUserToken }
            $html = Invoke-RestMethod $($script:baseServiceNowURL + "api/now/ui/date_time/legacy") -WebSession $SessionSN -Headers $headers
            #https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-webrequest?view=powershell-6
            
            #Step 3 Get ADFS page with Referer
            Write-Host "Step 3"
            $headers = @{ "Referer" = $sysparm_referring_url }
            $html = Invoke-RestMethod $ADFSSAMLURL -SessionVariable 'SessionADFS' -Headers $headers
            
            #Step 4 - Get form action and post to url credentials
            #Find Action url to post to
            Write-Host "Step 4"
            $Regex = [Regex]::new("(<form.*?(?:id=\""options\"".*?action=\""([^\""]+))[^>]*)")
            $groups = $Regex.Match($html)
            $ADFSFormActionURL = $groups.Groups.Item(2).value
            
            #Step 5 - Post Details
            Write-Host "Step 5"
            $headers = @{ "Referer" = $ADFSSAMLURL; "Content-Type" = "application/x-www-form-urlencoded" }
            $body = @{
                Username = $("Education\" + $user)
                Password = $pass
                AuthMethod = 'FormsAuthentication'
            }
            $html2 = Invoke-RestMethod $ADFSFormActionURL -Method "POST" -WebSession $SessionADFS -Headers $headers -Body $body
            $html2 = $html2.html.OuterXml
            
            #Step 6
            #Find Action <form method="POST" name="hiddenform" action="https://educationtastest.service-now.com:443/navpage.do">
            Write-Host "Step 6"
            $Regex = [Regex]::new("(<form.*?(?:method=\""POST\"".*?action=\""([^\""]+))[^>]*)")
            $groups = $Regex.Match($html2)
            $FormActionURL = $groups.Groups.Item(2).value
            
            #Find Value name="SAMLResponse" value="PHNhbWxwOlJlc3B
            $Regex = [Regex]::new("(<input.*?(?:name=\""SAMLResponse\"".*?value=\""([^\""]+))[^>]*)")
            $groups = $Regex.Match($html2)
            $SAMLResponse = $groups.Groups.Item(2).value
            
            #Find Relay state <input type="hidden" name="RelayState" value="https://educationtastest.service-now.com/navpage.do" />
            $Regex = [Regex]::new("(<input.*?(?:name=\""RelayState\"".*?value=\""([^\""]+))[^>]*)")
            $groups = $Regex.Match($html2)
            $RelayState = $groups.Groups.Item(2).value
            
            #Post to Action URL with SAMLResponse and RelayState as the Body
            #Post Details
            $headers = @{ "Referer" = $ADFSFormActionURL; "Content-Type" = "application/x-www-form-urlencoded" }
            $body = @{
                SAMLResponse = $($SAMLResponse)
                RelayState   = $RelayState
            }
            $html3 = Invoke-RestMethod $FormActionURL -Method "POST" -WebSession $SessionSN -Headers $headers -Body $body
            
            #Step 7
            #find JSESSIONID
            Write-Host "Step 7"
            $cookies = $SessionSN.Cookies.GetCookies($script:baseServiceNowURL)
            $JSESSIONID = ($cookies | where { $_.name -eq "JSESSIONID" }).value
            
            #Find X-UserToken var g_ck = '3088f219db3aa340c8854e53059619fe3e1046c2923ad98c3053bcb39d9116d548b61d41';
            $Regex = [Regex]::new("(?<=var g_ck = ')(.*)(?=')")
            $XUserToken = $Regex.Match($html3).value
            
            #Find who its logged in as window.NOW.user.name = 'grant.mannix';
            $Regex = [Regex]::new("(?<=window.NOW.user.name = ')(.*)(?=')")
            $LoggedInAs = $Regex.Match($html3).value
            
            Write-Host "Logged in as: $LoggedInAs"
            Write-Host "X-UserToken in as: $XUserToken"
            Write-Host "JSessionID in as: $JSESSIONID"
            $script:LoggedInAs = $LoggedInAs
            $script:XUserToken = $XUserToken
            $script:JSESSIONID = $JSESSIONID
            
            #Check to ensure account is signed in
            if (($script:LoggedInAs -ne "guest") -and ($script:LoggedInAs.Length -gt 0))
            {
                # Query Incident Table and get maximum numbers of ticket
                #$serialnumber = "017007664753"
                $serialnumber = $(Get-WmiObject win32_bios).SerialNumber
                if ($serialnumber.Length -lt 1) { $serialnumber = "NOTFOUND" }
                $headers = @{ "X-UserToken" = $XUserToken; "Cookie" = "JSESSIONID=$JSESSIONID" }
                $URI = $($script:baseServiceNowURL) + "api/now/table/cmdb_ci_computer?sysparm_limit=5&sysparm_query=serial_number=$serialnumber&sysparm_display_value=all"
                $data = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $SessionSN -Headers $headers
                Write-Host $data.result[0]
                Write-Host $URI
                
                $script:WebSession = $SessionSN
                $script:WebHeaders = $headers
                
                Return 1
                
            }
            #otherwise, return failure
            else
            {
                ErrorMsg -ErrorTitle "Error logging into ServiceNow" -ErrorMessage "Unable to login to ServiceNow" -ErrorLabel "Failed to sign in to ServiceNow. Please try again"
                Return 0
                
            }
            
            
        }
        
        #Function used to enable (and disable) stages of the program depending on the variable passed through, as well as preload variables
        function EnableFields ($Stage)
        {
            #Stage = 2
            #Stage 0: waiting for login. All variables are reset, Group Checklist is cleared, AssetGrid is cleared, Login button text is set, and late-stage buttons are disabled
            if ($Stage -eq 0)
            {
                $script:WebSession = $null
                $script:WebHeaders = $null
                $script:LoggedInAs = $null
                $script:XUserToken = $null
                $script:JSESSIONID = $null
                $script:FilterFN = $null
                $script:FilterSN = $null
                $script:FilterIG = $null
                $script:FilterCL = $null
                $script:Computers = $null
                $script:Computers = [System.Collections.ArrayList]@()
                
                $Grouplist = @("GroupList")
                Update-ListBox $checkedlistGroups $Grouplist
                
                UpdateDataGrid -filterType 0
                
                $buttonLogin.Text = "Login"
                $tabcontrol1.Enabled = $false
                $checkedlistGroups.Enabled = $false
                $checkboxOverwriteCurrentGrou.Enabled = $false
                $buttonApplyToList.Enabled = $false
                $buttonUploadToServiceNow.Enabled = $false
                $FNFilter.Enabled = $false
                $SNFilter.Enabled = $false
                $IGFilter.Enabled = $false
                $CLFilter.Enabled = $false
                $buttonApplyFilter.Enabled = $false
                $buttonClearFilter.Enabled = $false
                $buttonFilterSelected.Enabled = $false
                $buttonFilterChanges.Enabled = $false
                $checkboxOverwriteCurrentGrou.Checked = $false
                
            }
            #Stage 1: Asset retrieval. Pulls Locations from ServiceNow to populate Locations Text field, Login button text is set, and mid-stage buttons are enabled
            elseif ($Stage -eq 1)
            {
                GetLocations
                Update-ComboBox -ComboBox $Combobox1 -Items $script:Locations.name
                
                $buttonLogin.Text = "Reconnect"
                $tabcontrol1.Enabled = $true
                $checkedlistGroups.Enabled = $false
                $checkboxOverwriteCurrentGrou.Enabled = $false
                $buttonApplyToList.Enabled = $false
                $buttonUploadToServiceNow.Enabled = $false
                $FNFilter.Enabled = $false
                $SNFilter.Enabled = $false
                $IGFilter.Enabled = $false
                $CLFilter.Enabled = $false
                $buttonApplyFilter.Enabled = $false
                $buttonClearFilter.Enabled = $false
                $buttonFilterSelected.Enabled = $false
                $buttonFilterChanges.Enabled = $false
                $checkboxOverwriteCurrentGrou.Checked = $false
                
            }
            #Stage 2: Group applying. Gets groups from ServiceNow, clears change log, populates AssetGrid, Login button text is set, and late-stage buttons are enabled
            elseif ($Stage -eq 2)
            {
                $script:ChangeArray = $null
                $script:ChangeArray = [System.Collections.ArrayList]@()
                
                $Grouplist = GetGroups
                Update-ListBox $checkedlistGroups $Grouplist
                
                UpdateDataGrid -filterType 1
                
                $buttonLogin.Text = "Reconnect"
                $tabcontrol1.Enabled = $true
                $checkedlistGroups.Enabled = $true
                $checkboxOverwriteCurrentGrou.Enabled = $true
                $buttonApplyToList.Enabled = $true
                $buttonUploadToServiceNow.Enabled = $false
                $FNFilter.Enabled = $true
                $SNFilter.Enabled = $true
                $IGFilter.Enabled = $true
                $CLFilter.Enabled = $true
                $buttonApplyFilter.Enabled = $true
                $buttonClearFilter.Enabled = $true
                $buttonFilterSelected.Enabled = $true
                $buttonFilterChanges.Enabled = $true
                $checkboxOverwriteCurrentGrou.Checked = $false
                
            }
            #Stage 3: uploading changes. All buttons are enabled.
            elseif ($Stage -eq 3)
            {
                UpdateDataGrid -filterType 1
                
                $buttonLogin.Text = "Reconnect"
                $tabcontrol1.Enabled = $true
                $checkedlistGroups.Enabled = $true
                $checkboxOverwriteCurrentGrou.Enabled = $true
                $buttonApplyToList.Enabled = $true
                $buttonUploadToServiceNow.Enabled = $true
                $FNFilter.Enabled = $true
                $SNFilter.Enabled = $true
                $IGFilter.Enabled = $true
                $CLFilter.Enabled = $true
                $buttonApplyFilter.Enabled = $true
                $buttonClearFilter.Enabled = $true
                $buttonFilterSelected.Enabled = $true
                $buttonFilterChanges.Enabled = $true
                
            }
            
        }
        
        #Function that Pulls the SN shop order, searches assets by that shop order, then finds related computer ci's related to those assets and puts it into the $Computers array. 
        #Returns a 1 if successful, 0 if failed.
        function QueryByShopOrder ($OrderNumber)
        {
            #$OrderNumber = "RITM0027585"
            #zero out variables
            $script:Computers = $null
            $script:Computers = [System.Collections.ArrayList]@()
            $Assets = $null
            
            #check to make sure the provided shop order is actually a shop number
            $Correct = TestOrderInput -String $OrderNumber
            if ($Correct)
            {
                #Query SN for the shop number. Need to do this to get its sys_id
                $URI = $($script:baseServiceNowURL) + "api/now/table/task?sysparm_query=number%3D$OrderNumber&sysparm_limit=2"
                $Order = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $script:WebSession -Headers $script:WebHeaders
                #if Query doesnt return exactly 1 result, something is wrong. Return with failure
                if($Order.result.count -ne 1)
                {
                    ErrorMsg -ErrorTitle "Error in order lookup" -ErrorMessage "Error: failed to find unique value for $OrderNumber" -ErrorLabel "Failed to find $OrderNumber in SN, please try again"
                    return 0
                    
                }
                $OrderID = $Order.result.sys_id
                
                #Query SN for all assets related to the shop order
                $URI = $($script:baseServiceNowURL) + "api/now/table/alm_asset?sysparm_query=request_line%3D$OrderID&sysparm_limit=1000"
                $Assets = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $script:WebSession -Headers $script:WebHeaders
                
                #Check to ensure order actually returned assets
                if (($Assets -ne $null) -and ($Assets.result.count -gt 0))
                {
                    #For loop to go through each Asset in the list, querying SN for the sys_id of the related ci and adding it into the $Computers array. 
                    #Used a For loop as Foreach was messing with the formating
                    for ($n = 0; $n -lt $($Assets.result.count); $n++)
                    {
                        $CIsysID = $Assets.result[$n].ci.value
                        $URI = $($script:baseServiceNowURL) + "api/now/table/cmdb_ci_computer?sysparm_query=sys_id%3D$CIsysID&sysparm_limit=1"
                        $Computer = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $script:WebSession -Headers $script:WebHeaders
                        $script:Computers.Add($Computer)
        
                    }
                    
                }
                #otherwise, incorrect order chosen/ServiceNow not responding
                else
                {
                    ErrorMsg -ErrorTitle "Error in order lookup" -ErrorMessage "Error: failed to find assets for $OrderNumber" -ErrorLabel "Failed to find assets for $OrderNumber in SN, please try again"
                    return 0
                    
                }
                #return success
                return 1
                
            }
            #otherwise, provided shop order number was incorrect. Return failure
            else
            {
                return 0
                
            }
            
        }
        
        #Function used to check if the inputted shop order string matches expected format (starts with an RITM, is 11 characters long). Returns a 1 if successful, 0 if failed.
        function TestOrderInput ($String)
        {
            #$String = "RITM0027585"
            #Checks shop order starts with RITM
            if ($String.StartsWith('RITM', 'CurrentCultureIgnoreCase'))
            {
                #Checks shop order string length is exactly 11 characters.
                if ($String.length -eq 11)
                {
                    Write-Host "String passes check"
                    Return 1
                    
                }
                #otherwise, there is a typo. Return failure
                else
                {
                    ErrorMsg -ErrorTitle "Error in order lookup" -ErrorMessage "Error: $String isnt the right length" -ErrorLabel "$String does not match expected values, please try again"
                    Return 0
                    
                }
            }
            #otherwise they have put in the wrong item/typo. Return failure
            else
            {
                ErrorMsg -ErrorTitle "Error in order lookup" -ErrorMessage "Error: $String doesnt start with RITM" -ErrorLabel "$String does not match expected values, please try again"
                Return 0
                
            }
            
        }
        
        #Reads the passed location (either txt or csv) for Serials, then queries SN for each one and adding to the $Computers array. Returns a 1 if successful, 0 if failed.
        function QueryByList ($FileLocation)
        {
            #$FileLocation = "C:\Test\Temp.csv"
            #Threshold used as max number of devices to be changed
            $Threshold = 1000
            #zero out variables
            $script:Computers = $null
            $script:Computers = [System.Collections.ArrayList]@()
            $SerialList = [System.Collections.ArrayList]@()
            $SerialFail = ""
            
            #FileLocation = "C:\Temp\Test.txt"
            #Checks if passed location is a txt file
            if ($FileLocation -like "*.txt")
            {
                $SerialList = Get-Content $FileLocation
                
            }
            #Otherwise, checks if passed location is a csv file (Expected value is like export from SN with Serial Numbers column)
            elseif ($FileLocation -like "*.csv")
            {
                $csv = Import-Csv -Path $FileLocation
                
                Foreach ($line in $csv)
                {
                    $SerialList.Add($line.serial_number)
                    
                }
                
            }
            #Otherwise, not a supported file type. Return failure
            else
            {
                ErrorMsg -ErrorTitle "Error in File lookup" -ErrorMessage "Error: $FileLocation does not match expected file format" -ErrorLabel "Unrecognised file type, please try again"
                return 0
                
            }
            
            #if the number of serials found is 0, read was unsuccessful. Return failure
            if ($SerialList.length -eq 0)
            {
                ErrorMsg -ErrorTitle "Error in File lookup" -ErrorMessage "Error: Unable to pull Serial numbers from $FileLocation" -ErrorLabel "Unable to find Serial Numbers, please check the file"
                return 0
                
            }
            #otherwise, if number of serials is over a threshold, return failure. this is to stop accidental change of everything statewide.
            elseif ($SerialList.length -gt $Threshold)
            {
                ErrorMsg -ErrorTitle "Error in File lookup" -ErrorMessage "Error: Number of Serials over Threshold $Threshold" -ErrorLabel "Too many devices chosen"
                return 0
                
            }
            
            #for every serial in the list, query SN for the asset and add it to the $Computers array
            foreach ($Serial in $SerialList)
            {
                $Computer = $null
                #checks to make sure Serial isnt a typo
                if ($Serial.length -gt 4)
                {
                    $URI = $($script:baseServiceNowURL) + "api/now/table/cmdb_ci_computer?sysparm_query=serial_number%3D$Serial&sysparm_limit=2"
                    $Computer = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $script:WebSession -Headers $script:WebHeaders
                    if ($Computer.result.count -eq 1)
                    {
                        $script:Computers.Add($Computer)
                        
                    }
                    else
                    {
                        $SerialFail += $Serial
                        
                    }
                    
                }
                
            }
            #If the computers array is empty, failed to retrieve any serials
            if ($script:Computers[0] -eq $null)
            {
                ErrorMsg -ErrorTitle "Failed all serials search" -ErrorMessage "unable to find any of the listed Serials" -ErrorLabel "Failed to find any Serials"
                return 0
                
            }
            #If any serials failed to search, popup to inform
            elseif ($SerialFail.Length -gt 0)
            {
                ErrorMsg -ErrorTitle "Failed some serial search" -ErrorMessage "The following Serials failed to find a unique Asset: $SerialFail" -ErrorLabel "Failed to find some Serials"
                
            }
            
            #return success
            return 1
            
        }
        
        #Queries the passed ServiceNow location, returning all Deployed/In Stock/On Order assets at that site. Returns a 1 if successful, 0 if failed.
        function QueryByLocation ($SelectedLocation)
        {
            #$SelectedLocation = "DoE - 75 Campbell Street"
            #Clears Computer list
            $script:Computers = $null
            $script:Computers = [System.Collections.ArrayList]@()
            
            #pulls Sys_ID from locations array filtered based on selected value
            $Site = $script:Locations | Where-Object { $_.name -eq $SelectedLocation }
            $Sys_ID = $Site.sys_id
            
            #Queries ServiceNow for all Deployed/In Stock/On Order assets at that site
            $URI = $($script:baseServiceNowURL) + "api/now/table/cmdb_ci_computer?sysparm_query=sys_class_name%3Dcmdb_ci_computer%5Elocation%3D$Sys_ID%5Ehardware_statusINinstalled%2Cin_stock%2Con_order"
            $script:Computers = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $script:WebSession -Headers $script:WebHeaders
            
            #If no assets, return failure
            if ($script:Computers.result -eq $null)
            {
                ErrorMsg -ErrorTitle "No computers returned" -ErrorMessage "ServiceNow has returned 0 computers for this site"
                return 0
                
            }
            
            return 1
            
        }
        
        #Checks the passed array of groups against what is already in each $Computer, adding them in if they are missing
        Function AddGroups ($GroupList)
        {
            #$GroupList = @("group01","group03","Science","Test","Steam")
            #Pulls current asset list from the AssetGrid
            $table = $datagridview1
            foreach ($row in $Table.Rows)
            {
                #Array slot pulled from the ID column - 1
                $ArrayID = $($row.Cells["ID"].Value) - 1
                
                #$currentgroups = "group01,group02,Steam"
                $CurrentGroups = $script:Computers.result[$ArrayID].u_intune_assignment_groups
                $String = ""
                
                #if groups are currently blank, set chosen list as groups
                if ($CurrentGroups.length -eq 0)
                {
                    $String = ($GroupList -join ",")
                    $script:Computers.result[$ArrayID].u_intune_assignment_groups = $String
                    
                }
                #Otherwise, add groups if they dont match up with what is currently in the groups
                else
                {
                    $FilteredGroupsList = $GroupList | Where-Object { $CurrentGroups -notmatch "$_" }
                    $String = ($FilteredGroupsList -join ",")
                    $script:Computers.result[$ArrayID].u_intune_assignment_groups = $CurrentGroups + ",$String"
                    
                }
                
                #Add change to change array
                $script:ChangeArray += $row.Cells["ID"].Value
                
                Write-Host "$($script:Computers.result[$ArrayID].serial_number) added groups $String"
                
            }
            
            #clear out duplicates in change array
            $script:ChangeArray = $script:ChangeArray | Select-Object -Unique
            
        }
        
        #Wipes the current assigned groups and overwrites with the new groups (if any)
        function SetGroups ($GroupList)
        {
            #$GroupList = @("group01","group03","Science","Test","Steam")
            #Pulls current asset list from the AssetGrid
            $Table = $datagridview1
            #Converts array of groups into single string
            $String = ($GroupList -join ",")
            #goes through each row and sets the groups
            foreach ($row in $Table.Rows)
            {
                $ArrayID = $($row.Cells["ID"].Value) - 1
                $script:Computers.result[$ArrayID].u_intune_assignment_groups = $String
                
                #add change to change array
                $script:ChangeArray += $row.Cells["ID"].Value
                
                Write-Host "$($script:Computers.result[$ArrayID].serial_number) groups set as $String"
                
            }
            
            #clear out duplicates in change array
            $script:ChangeArray = $script:ChangeArray | Select-Object -Unique
            
        }
        
        #end function that will pass the information in the $Computers array to ServiceNow. This will only update the assignment_group and comments fields
        function UpdateServiceNow ($IDList)
        {
            #IDList = @("1","25","17","60")
            $Updated = New-Object System.Collections.ArrayList
            $date = Get-Date
            #loop through each computer as can only PUT one at a time in SN
            Foreach ($ID in $IDList)
            {
                #converts string ID to Arrayslot
                $i = [int]$ID - 1
                #Clears response for checking later
                $response = $null
                $sysID = $script:Computers.result[$i].sys_id
                #Checks to ensure not error computer		
                if ($sysID.length -ne 0)
                {
                    #creates JSON and puts it to ServiceNow
                    $comments = "Groups updated by $($script:LoggedInAs): $date
        $($script:Computers.result[$i].comments)"
                    $json = @{
                        "u_intune_assignment_groups" = "$($script:Computers.result[$i].u_intune_assignment_groups)"
                        "comments"				     = "$($comments)"
                    }
                    $PUTuri = $($script:baseServiceNowURL) + "api/now/table/cmdb_ci_computer/$sysID"
                    $json = ConvertTo-Json $json
                    $response = Invoke-RestMethod -method Put -Uri $PUTuri -ContentType "application/json" -Body $json -WebSession $script:WebSession -Headers $script:WebHeaders
                    
                    #if $response is still null, then POST errored out
                    if ($response -eq $null)
                    {
                        [void][System.Windows.Forms.MessageBox]::Show("Connection to ServiceNow has failed, update cancelled", "Invoke Error")
                        return 0
                        
                    }
                    
                    Write-Host $script:Computers.result[$i].serial_number + " updated"
                    #Adds computer to the success array
                    $Updated.Add($script:Computers.result[$i].serial_number)
                    
                }
                        
            }
            #Pops up a message with all the successful computers
            [void][System.Windows.Forms.MessageBox]::Show("The following assets have been updated:`n$($Updated | Out-String)", "Update pushed")
            
            #reverts back to asset collection stage
            EnableFields -Stage 1
            
            return 1
            
        }
        
        #Queries SN to get the choice list for the Intune Assignment Groups
        function GetGroups
        {
            #URI making sure its both based on the u_intune_assignment_groups and that its pointing at the Computer CI table
            $URI = $($script:baseServiceNowURL) + "api/now/table/sys_choice?sysparm_query=element%3Du_intune_assignment_groups%5Ename%3Dcmdb_ci_computer"
            $AssignmentGroups = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $script:WebSession -Headers $script:WebHeaders
            
            return $AssignmentGroups.result.label
            
        }
        
        #Queries SN to get all the Locations for assets, sorting alphabetically by Name
        function GetLocations
        {
            $URI = $($script:baseServiceNowURL) + "api/now/table/cmn_location"
            $location = Invoke-RestMethod -Uri $URI -ContentType "application/json" -WebSession $script:WebSession -Headers $script:WebHeaders
            $script:Locations = $location.result | Sort-Object name
            
        }
        
        #Used to display errors with popup and write-host
        #ErrorMsg -ErrorTitle "Title" -ErrorMessage "Message" -ErrorLabel "Label"
        function ErrorMsg ($ErrorTitle, $ErrorMessage, $ErrorLabel)
        {
            [void][System.Windows.Forms.MessageBox]::Show($ErrorMessage, $ErrorTitle)
            Write-Host ($ErrorTitle, $ErrorMessage) -Separator ": " -ForegroundColor Red -BackgroundColor White
            
        }
        
        #Checks passed computer against currently selected filters. Returns 1 for match or 0 for mis-match
        Function ApplyFilter ($Computer)
        {
            #$Computer = @(name:...)
            if (($Computer.name -match $script:FilterFN) -and ($Computer.serial_number -match $script:FilterSN) -and ($Computer.u_intune_assignment_groups -match $script:FilterIG) -and ($Computer.u_custom_location -match $script:FilterCL))
            {
                Return 1
                
            }
            Else
            {
                Return 0
                
            }
                    
        }
        
        #Fills in AssetGrid with assets from the $Script:Computers array against the currently selected filters
        function UpdateDataGrid ($filterType)
        {
            #$filterType = 1
            $table = New-Object System.Data.DataTable
            $column = New-Object System.Data.DataColumn
            $column.ColumnName = "ID"
            $table.Columns.Add($column)
            $column = New-Object System.Data.DataColumn
            $column.ColumnName = "FriendlyName"
            $table.Columns.Add($column)
            $column = New-Object System.Data.DataColumn
            $column.ColumnName = "Serial"
            $table.Columns.Add($column)
            $column = New-Object System.Data.DataColumn
            $column.ColumnName = "IntuneGroups"
            $table.Columns.Add($column)
            $column = New-Object System.Data.DataColumn
            $column.ColumnName = "CustomLocation"
            $table.Columns.Add($column)
            #Filter 1, fill grid against the filter text boxes. $null check is for first run when the Computers array is empty
            if (($filterType -eq 1) -and ($script:Computers[0] -ne $null))
            {
                for ($i = 0; $i -lt @($script:Computers.result).count; $i++)
                {
                    #Checks the current computer against the filters. If return 1 add to grid
                    $filter = ApplyFilter -Computer $script:Computers.result[$i]
                    if ($filter)
                    {
                        $row = $null
                        $row = $table.NewRow()
                        $row["ID"] = $i + 1
                        $row["FriendlyName"] = $script:Computers.result[$i].name
                        $row["Serial"] = $script:Computers.result[$i].serial_number
                        $row["IntuneGroups"] = $script:Computers.result[$i].u_intune_assignment_groups
                        $row["CustomLocation"] = $script:Computers.result[$i].u_custom_location
                        $table.Rows.Add($row)
                        
                    }
                    
                }
                
            }
            #Filter 2, fill grid with selected rows.
            elseif ($filterType -eq 2)
            {
                $TempTable = $datagridview1.SelectedRows
                foreach ($TempRow in $TempTable)
                {
                    $row = $null
                    $row = $table.NewRow()
                    $ArrayID = $($TempRow.Cells["ID"].Value) - 1
                    $row["ID"] = $TempRow.Cells["ID"].Value
                    $row["FriendlyName"] = $script:Computers.result[$ArrayID].name
                    $row["Serial"] = $script:Computers.result[$ArrayID].serial_number
                    $row["IntuneGroups"] = $script:Computers.result[$ArrayID].u_intune_assignment_groups
                    $row["CustomLocation"] = $script:Computers.result[$ArrayID].u_custom_location
                    $table.Rows.Add($row)
                    
                }
                
            }
            #Filter 3, fill grid with computers in the Change array
            elseif ($filterType -eq 3)
            {
                foreach ($ID in $script:ChangeArray)
                {
                    $i = [int]$ID - 1
                    $row = $null
                    $row = $table.NewRow()
                    $row["ID"] = $i + 1
                    $row["FriendlyName"] = $script:Computers.result[$i].name
                    $row["Serial"] = $script:Computers.result[$i].serial_number
                    $row["IntuneGroups"] = $script:Computers.result[$i].u_intune_assignment_groups
                    $row["CustomLocation"] = $script:Computers.result[$i].u_custom_location
                    $table.Rows.Add($row)
                    
                }
                        
            }
            
            #Apply the table to the ArrayGrid, custom sizes for the columns
            $datagridview1.DataSource = $table
            $datagridview1.Columns[0].Width = 50
            $datagridview1.Columns[1].Width = 150
            $datagridview1.Columns[2].Width = 150
            $datagridview1.Columns[3].Width = 300
            $datagridview1.Columns[4].Width = 300
            
            #Colours the ID part of assets in the Change Array
            ColourDataGrid
            
            #refreshes the text on the Apply Groups button
            CheckCellSelection
            
        }
        
        #Checks rows of the AssetGrid if they are in the change array, colouring green if so
        function ColourDataGrid
        {
            for ($i = 0; $i -lt $datagridview1.RowCount; $i++)
            {
                if ($script:ChangeArray.Contains($datagridview1.Item(0, $i).Value))
                {
                    $datagridview1.Item(0, $i).Style.backcolor = 'LightGreen'
                    
                }
                
            }
            
        }
        
        function Update-ListBox
        {
        <#
            .SYNOPSIS
                This functions helps you load items into a ListBox or CheckedListBox.
            
            .DESCRIPTION
                Use this function to dynamically load items into the ListBox control.
            
            .PARAMETER ListBox
                The ListBox control you want to add items to.
            
            .PARAMETER Items
                The object or objects you wish to load into the ListBox's Items collection.
            
            .PARAMETER DisplayMember
                Indicates the property to display for the items in this control.
            
            .PARAMETER Append
                Adds the item(s) to the ListBox without clearing the Items collection.
            
            .EXAMPLE
                Update-ListBox $ListBox1 "Red", "White", "Blue"
            
            .EXAMPLE
                Update-ListBox $listBox1 "Red" -Append
                Update-ListBox $listBox1 "White" -Append
                Update-ListBox $listBox1 "Blue" -Append
            
            .EXAMPLE
                Update-ListBox $listBox1 (Get-Process) "ProcessName"
            
            .NOTES
                Additional information about the function.
        #>
            
            param
            (
                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [System.Windows.Forms.ListBox]$ListBox,
                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                $Items,
                [Parameter(Mandatory = $false)]
                [string]$DisplayMember,
                [Parameter(Mandatory = $false)]
                [string]$ValueMember,
                [switch]$Append
            )
            
            if (-not $Append)
            {
                $listBox.Items.Clear()
            }
            
            if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
            {
                $listBox.Items.AddRange($Items)
            }
            elseif ($Items -is [Array])
            {
                $listBox.BeginUpdate()
                foreach ($obj in $Items)
                {
                    $listBox.Items.Add($obj)
                }
                $listBox.EndUpdate()
            }
            else
            {
                $listBox.Items.Add($Items)
            }
            
            if ($DisplayMember)
            {
                $listBox.DisplayMember = $DisplayMember
            }
            if ($ValueMember)
            {
                $ListBox.ValueMember = $ValueMember
            }
        }
        
        function CheckCellSelection
        {
            if ($datagridview1.SelectedRows.Count -eq 0)
            {
                $buttonApplyToList.Text = "Apply to List"
                
            }
            else
            {
                $buttonApplyToList.Text = "Apply to Selected"
                
            }
            
        }
        
        function Update-ComboBox
        {
        <#
            .SYNOPSIS
                This functions helps you load items into a ComboBox.
            
            .DESCRIPTION
                Use this function to dynamically load items into the ComboBox control.
            
            .PARAMETER ComboBox
                The ComboBox control you want to add items to.
            
            .PARAMETER Items
                The object or objects you wish to load into the ComboBox's Items collection.
            
            .PARAMETER DisplayMember
                Indicates the property to display for the items in this control.
                
            .PARAMETER ValueMember
                Indicates the property to use for the value of the control.
            
            .PARAMETER Append
                Adds the item(s) to the ComboBox without clearing the Items collection.
            
            .EXAMPLE
                Update-ComboBox $combobox1 "Red", "White", "Blue"
            
            .EXAMPLE
                Update-ComboBox $combobox1 "Red" -Append
                Update-ComboBox $combobox1 "White" -Append
                Update-ComboBox $combobox1 "Blue" -Append
            
            .EXAMPLE
                Update-ComboBox $combobox1 (Get-Process) "ProcessName"
            
            .NOTES
                Additional information about the function.
        #>
            
            param
            (
                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                [System.Windows.Forms.ComboBox]$ComboBox,
                [Parameter(Mandatory = $true)]
                [ValidateNotNull()]
                $Items,
                [Parameter(Mandatory = $false)]
                [string]$DisplayMember,
                [Parameter(Mandatory = $false)]
                [string]$ValueMember,
                [switch]$Append
            )
            
            if (-not $Append)
            {
                $ComboBox.Items.Clear()
            }
            
            if ($Items -is [Object[]])
            {
                $ComboBox.Items.AddRange($Items)
            }
            elseif ($Items -is [Array])
            {
                $ComboBox.BeginUpdate()
                foreach ($obj in $Items)
                {
                    $ComboBox.Items.Add($obj)
                }
                $ComboBox.EndUpdate()
            }
            else
            {
                $ComboBox.Items.Add($Items)
            }
            
            $ComboBox.DisplayMember = $DisplayMember
            
        }
    #endregion Source: Globals.ps1
    
    #region Source: MainForm.psf
    function Show-MainForm_psf
    {
    #region File Recovery Data (DO NOT MODIFY)
    <#RecoveryData:
    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
    n+D/fzD6r/8FJQrzHCcdAAA=#>
    #endregion
        #----------------------------------------------
        #region Import the Assemblies
        #----------------------------------------------
        [void][reflection.assembly]::Load('System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
        [void][reflection.assembly]::Load('System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
        #endregion Import Assemblies
    
        #----------------------------------------------
        #region Generated Form Objects
        #----------------------------------------------
        [System.Windows.Forms.Application]::EnableVisualStyles()
        $formIntuneMassGroupUpdat = New-Object 'System.Windows.Forms.Form'
        $labelVersion = New-Object 'System.Windows.Forms.Label'
        $buttonFilterChanges = New-Object 'System.Windows.Forms.Button'
        $buttonFilterSelected = New-Object 'System.Windows.Forms.Button'
        $buttonClearFilter = New-Object 'System.Windows.Forms.Button'
        $buttonApplyFilter = New-Object 'System.Windows.Forms.Button'
        $FNFilter = New-Object 'System.Windows.Forms.TextBox'
        $SNFilter = New-Object 'System.Windows.Forms.TextBox'
        $IGFilter = New-Object 'System.Windows.Forms.TextBox'
        $CLFilter = New-Object 'System.Windows.Forms.TextBox'
        $labelCustomLocation = New-Object 'System.Windows.Forms.Label'
        $labelIntuneGroups = New-Object 'System.Windows.Forms.Label'
        $labelSerialNumber = New-Object 'System.Windows.Forms.Label'
        $labelFriendlyName = New-Object 'System.Windows.Forms.Label'
        $labelFilters = New-Object 'System.Windows.Forms.Label'
        $labelGroupList = New-Object 'System.Windows.Forms.Label'
        $buttonReset = New-Object 'System.Windows.Forms.Button'
        $buttonUploadToServiceNow = New-Object 'System.Windows.Forms.Button'
        $buttonApplyToList = New-Object 'System.Windows.Forms.Button'
        $checkboxOverwriteCurrentGrou = New-Object 'System.Windows.Forms.CheckBox'
        $checkedlistGroups = New-Object 'System.Windows.Forms.CheckedListBox'
        $datagridview1 = New-Object 'System.Windows.Forms.DataGridView'
        $labelErrorMsg = New-Object 'System.Windows.Forms.Label'
        $tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
        $tabpage1 = New-Object 'System.Windows.Forms.TabPage'
        $labelExampleRITM0027585 = New-Object 'System.Windows.Forms.Label'
        $labelEnterTheRITMNumberOf = New-Object 'System.Windows.Forms.Label'
        $buttonSearchSN = New-Object 'System.Windows.Forms.Button'
        $txtRITMSearch = New-Object 'System.Windows.Forms.TextBox'
        $labelRITM = New-Object 'System.Windows.Forms.Label'
        $tabpage2 = New-Object 'System.Windows.Forms.TabPage'
        $labelExampleCTempExampleF = New-Object 'System.Windows.Forms.Label'
        $labelEnterThePathorPressB = New-Object 'System.Windows.Forms.Label'
        $buttonBrowse = New-Object 'System.Windows.Forms.Button'
        $buttonUploadFile = New-Object 'System.Windows.Forms.Button'
        $txtFilePath = New-Object 'System.Windows.Forms.TextBox'
        $labelFilePath = New-Object 'System.Windows.Forms.Label'
        $tabpage3 = New-Object 'System.Windows.Forms.TabPage'
        $buttonSelectLocation = New-Object 'System.Windows.Forms.Button'
        $combobox1 = New-Object 'System.Windows.Forms.ComboBox'
        $labelLocation = New-Object 'System.Windows.Forms.Label'
        $labelYouCanStartTypingToJ = New-Object 'System.Windows.Forms.Label'
        $labelSelectTheSiteFromThe = New-Object 'System.Windows.Forms.Label'
        $buttonLogin = New-Object 'System.Windows.Forms.Button'
        $labelPassword = New-Object 'System.Windows.Forms.Label'
        $labelUsername = New-Object 'System.Windows.Forms.Label'
        $txtPass = New-Object 'System.Windows.Forms.TextBox'
        $txtUser = New-Object 'System.Windows.Forms.TextBox'
        $panel1 = New-Object 'System.Windows.Forms.Panel'
        $openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
        $InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
        #endregion Generated Form Objects
    
        #----------------------------------------------
        # User Generated Script
        #----------------------------------------------
        
        $formIntuneMassGroupUpdat_Load={
            #TODO: Initialize Form Controls here
            #confirm start at first stage
            EnableFields -Stage 0
            
            #pull username from environmental variables and prefil the Username field
            $txtUser.Text = $env:USERNAME
            
            #sets the script version label down the bottom right
            $labelVersion.Text = "Version: $script:Version"
            
            [windows.forms.messagebox]::show("NOTE: This is currently running on DEV instance of ServiceNow. Any changes made will not affect production", "RUNNING ON DEV", 'OK', 'Warning')
            
        }
        
        $buttonLogin_Click={
            #TODO: Place custom script here
            $labelErrorMsg.Text = "logging in..."
            
            #Attempts to log in with username and password text fields
            $Success = ServiceNowSetup -User $txtUser.Text -pass $txtPass.Text
            
            if ($Success)
            {
                $formIntuneMassGroupUpdat.Text = "Logged in as $script:LoggedInAs at " + $(Get-Date -Format "HH:mm dddd")
                $labelErrorMsg.Text = "successfully logged in"
                #if not reconnect, progress to the next stage
                if ($buttonLogin.Text -eq "Login")
                {
                    EnableFields -Stage 1
                    
                }
                
            }
            Else
            {
                $formIntuneMassGroupUpdat.Text = "Failed to sign in, try again"
                $labelErrorMsg.Text = "Failed to sign in to ServiceNow. Please try again"
                #if not reconnect, revert to the login stage
                if ($buttonLogin.Text -eq "Login")
                {
                    EnableFields -Stage 0
                    
                }
                
            }
            
        }
        
        
        $buttonSearchSN_Click={
            #TODO: Place custom script here
            $labelErrorMsg.Text = "Searching Order Number..."
            
            #query ServiceNow by Shop Order Number text box
            $Success = QueryByShopOrder -OrderNumber $txtRITMSearch.Text
            
            #clear any filters
            $buttonClearFilter.PerformClick()
            
            #if successful, progress
            if ($Success)
            {
                EnableFields -Stage 2
                $labelErrorMsg.Text = "Successfully returned assets from Shop Order"
                
            }
            else
            {
                $labelErrorMsg.Text = "Failed to get Shop Order"
                
            }	
            
        }
        
        $buttonUploadFile_Click={
            #TODO: Place custom script here
            $labelErrorMsg.Text = "Searching Serial Numbers..."
            
            #query ServiceNow by file upload
            $Success = QueryByList -FileLocation $txtFilePath.Text
            
            #clear any filters
            $buttonClearFilter.PerformClick()
            
            #if successful, progress
            if ($Success)
            {
                EnableFields -Stage 2
                $labelErrorMsg.Text = "Successfully returned assets from Serial Number list"
                
            }
            else
            {
                $labelErrorMsg.Text = "Failed to upload file"
                
            }
            
        }
        
        $buttonApplyToList_Click={
            #TODO: Place custom script here
            $labelErrorMsg.Text = "Applying group changes..."
            
            #Get array of checked groups
            $Groups = $checkedlistGroups.CheckedItems
            
            #If text of button has "Selected" it means certain rows are chosen. Filter applied
            if ($buttonApplyToList.Text -match "Selected")
            {
                UpdateDataGrid -filterType 2
                Write-Host "selected list"
                
            }
            #if overwrite box checked, set the groups
            if ($checkboxOverwriteCurrentGrou.Checked)
            {
                SetGroups -GroupList $Groups
                $labelErrorMsg.Text = "Checklist set to gorups"
                
            }
            #otherwise, add the groups
            else
            {
                AddGroups -GroupList $Groups
                $labelErrorMsg.Text = "Checklist added to groups"
                
            }
            
            #refresh AssetGrid view
            UpdateDataGrid -filterType 1
            
            #progress to next stage
            EnableFields -Stage 3
            
            #uncheck all groups in the checklist
            for ($i = 0; $i -lt $checkedlistGroups.Items.Count; $i++)
            {
                $checkedlistGroups.SetItemCheckState($i, 'Unchecked')
                
            }
                
        }
        
        $buttonUploadToServiceNow_Click={
            #TODO: Place custom script here
            
            #filter AssetGrid to Change array
            UpdateDataGrid -filterType 3
            
            #create array of serial numbers set to change
            $ChangeSerialList = New-Object System.Collections.ArrayList
            foreach ($ID in $script:ChangeArray)
            {
                $i = [int]$ID - 1
                $ChangeSerialList.Add($script:Computers.result[$i].serial_number)
                
            }
            
            #pop up a yes/no window with list of assets to be changed
            $response = [windows.forms.messagebox]::show($($ChangeSerialList | Out-String), "Do you want to change these assets?", 'YesNo', 'Question')
            
            #if user clicks yes
            if ($response -eq "Yes")
            {
                $labelErrorMsg.Text = "Posting changes to ServiceNow..."
                
                #post updates to ServiceNow
                $Success = UpdateServiceNow -IDList $script:ChangeArray
                
                #clear filters
                $buttonClearFilter.PerformClick()
                
                if ($Success)
                {
                    $labelErrorMsg.Text = "Changes uploaded"
                    EnableFields -Stage 2
                    
                }
                else
                {
                    $labelErrorMsg.Text = "Changes failed to upload"
                    
                }
                
            }
        }
        
        $buttonReset_Click={
            #TODO: Place custom script here
            
            #Confirm button wasnt accidentally pressed
            $response = [windows.forms.messagebox]::show("Are you sure you want to reset everything?", "Reset?", 'YesNo','Warning')
            
            #if yes clicked, reset back to start
            if ($response -eq "Yes")
            {
                EnableFields -Stage 0
                
                $buttonClearFilter.PerformClick()
                
                $labelErrorMsg.Text = "Intune Group Adder App reset"
                        
            }
            
        }
        
        $buttonBrowse_Click={
            #TODO: Place custom script here
            #Open file browser window to select file, filling in filepath text with selected file
            $openfiledialog1.ShowDialog()
            $txtFilePath.Text = $openfiledialog1.FileName
            
        }
        
        $buttonApplyFilter_Click={
            #TODO: Place custom script here
            
            #Sets all the global variables to the filters
            $script:FilterFN = $FNFilter.Text
            $script:FilterSN = $SNFilter.Text
            $script:FilterIG = $IGFilter.Text
            $script:FilterCL = $CLFilter.Text
            
            #refreshes the AssetGrid with new filters applied
            UpdateDataGrid -filterType 1
            
            $labelErrorMsg.Text = "Filters applied"
            
            
        }
        
        $buttonClearFilter_Click={
            #TODO: Place custom script here
            
            #Clears all the global variables and text fields
            $FNFilter.Text = ""
            $SNFilter.Text = ""
            $IGFilter.Text = ""
            $CLFilter.Text = ""	
            $script:FilterFN = $null
            $script:FilterSN = $null
            $script:FilterIG = $null
            $script:FilterCL = $null
            
            #refreshes the AssetGrid
            UpdateDataGrid -filterType 1
            
            $labelErrorMsg.Text = "Filters reset"
            
        }
        
        $buttonFilterSelected_Click={
            #TODO: Place custom script here
            
            #Updates AssetGrid, filtering based on selected rows
            UpdateDataGrid -filterType 2
            
            $labelErrorMsg.Text = "Filters applied"
            
        }
        
        $txtPass_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonLogin.PerformClick()
                
            }
            
        }
        
        $txtRITMSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonSearchSN.PerformClick()
                
            }
            
        }
        
        $txtFilePath_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonUploadFile.PerformClick()
                
            }
            
        }
        
        
        $FNFilter_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonApplyFilter.PerformClick()
                
            }
            
        }
        
        $SNFilter_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonApplyFilter.PerformClick()
                
            }
            
        }
        
        $IGFilter_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonApplyFilter.PerformClick()
                
            }
            
        }
        
        $CLFilter_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonApplyFilter.PerformClick()
                
            }
            
        }
        
        $datagridview1_CellMouseUp=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
            #TODO: Place custom script here
            #updates Text on Apply Groups button based on if rows are selected or not
            CheckCellSelection
            
        }
        
        $buttonSelectLocation_Click={
            #TODO: Place custom script here
            
            $labelErrorMsg.Text = "Searching by location..."
            
            #if combobox is empty, inform that no selection has been made
            if ($combobox1.Text.Length -eq 0)
            {
                [void][System.Windows.Forms.MessageBox]::Show("Invalid Location, please try again", "Error with Location Selection")
                $buttonClearFilter.PerformClick()
                $labelErrorMsg.Text = "invalid location selected"
                
            }
            #otherwise, query Servicenow by location and progress
            Else
            {
                $success = QueryByLocation -SelectedLocation $combobox1.Text
                
                $buttonClearFilter.PerformClick()
                
                if ($success)
                {
                    EnableFields -Stage 2
                    $labelErrorMsg.Text = "Successfully returned assets by location"
                    
                }
                else
                {
                    $labelErrorMsg.Text = "Failed to get assets by location"
                    
                }
                
            }
            
        }
        
        
        
        
        
        $buttonFilterChanges_Click={
            #TODO: Place custom script here
            #filter based on Change array
            UpdateDataGrid -filterType 3
            
            $labelErrorMsg.Text = "Filter applied"
            
        }
        
        $combobox1_KeyDown=[System.Windows.Forms.KeyEventHandler]{
        #Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
            #TODO: Place custom script here
            if ($_.KeyCode -eq 'Enter')
            {
                $buttonSelectLocation.PerformClick()
                
            }
            
        }
        
        
        $datagridview1_Sorted={
            #TODO: Place custom script here
            #if AssetGrid is re-ordered, recolour the assets based on the change array
            ColourDataGrid
            
        }
        
        
        
        # --End User Generated Script--
        #----------------------------------------------
        #region Generated Events
        #----------------------------------------------
        
        $Form_StateCorrection_Load=
        {
            #Correct the initial state of the form to prevent the .Net maximized form issue
            $formIntuneMassGroupUpdat.WindowState = $InitialFormWindowState
        }
        
        $Form_StoreValues_Closing=
        {
            #Store the control values
            $script:MainForm_FNFilter = $FNFilter.Text
            $script:MainForm_SNFilter = $SNFilter.Text
            $script:MainForm_IGFilter = $IGFilter.Text
            $script:MainForm_CLFilter = $CLFilter.Text
            $script:MainForm_checkboxOverwriteCurrentGrou = $checkboxOverwriteCurrentGrou.Checked
            $script:MainForm_checkedlistGroups = $checkedlistGroups.SelectedItems
            $script:MainForm_datagridview1 = $datagridview1.SelectedCells
            if ($datagridview1.SelectionMode -eq 'FullRowSelect')
            { $script:MainForm_datagridview1_SelectedObjects = $datagridview1.SelectedRows | Select-Object -ExpandProperty DataBoundItem }
            else { $script:MainForm_datagridview1_SelectedObjects = $datagridview1.SelectedCells | Select-Object -ExpandProperty RowIndex -Unique | ForEach-Object { if ($_ -ne -1) { $datagridview1.Rows[$_].DataBoundItem } } }
            $script:MainForm_txtRITMSearch = $txtRITMSearch.Text
            $script:MainForm_txtFilePath = $txtFilePath.Text
            $script:MainForm_combobox1 = $combobox1.Text
            $script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItem
            $script:MainForm_txtPass = $txtPass.Text
            $script:MainForm_txtUser = $txtUser.Text
        }
    
        
        $Form_Cleanup_FormClosed=
        {
            #Remove all event handlers from the controls
            try
            {
                $buttonFilterChanges.remove_Click($buttonFilterChanges_Click)
                $buttonFilterSelected.remove_Click($buttonFilterSelected_Click)
                $buttonClearFilter.remove_Click($buttonClearFilter_Click)
                $buttonApplyFilter.remove_Click($buttonApplyFilter_Click)
                $FNFilter.remove_KeyDown($FNFilter_KeyDown)
                $SNFilter.remove_KeyDown($SNFilter_KeyDown)
                $IGFilter.remove_KeyDown($IGFilter_KeyDown)
                $CLFilter.remove_KeyDown($CLFilter_KeyDown)
                $buttonReset.remove_Click($buttonReset_Click)
                $buttonUploadToServiceNow.remove_Click($buttonUploadToServiceNow_Click)
                $buttonApplyToList.remove_Click($buttonApplyToList_Click)
                $datagridview1.remove_CellMouseUp($datagridview1_CellMouseUp)
                $datagridview1.remove_Sorted($datagridview1_Sorted)
                $buttonSearchSN.remove_Click($buttonSearchSN_Click)
                $txtRITMSearch.remove_KeyDown($txtRITMSearch_KeyDown)
                $buttonBrowse.remove_Click($buttonBrowse_Click)
                $buttonUploadFile.remove_Click($buttonUploadFile_Click)
                $txtFilePath.remove_KeyDown($txtFilePath_KeyDown)
                $buttonSelectLocation.remove_Click($buttonSelectLocation_Click)
                $combobox1.remove_KeyDown($combobox1_KeyDown)
                $buttonLogin.remove_Click($buttonLogin_Click)
                $txtPass.remove_KeyDown($txtPass_KeyDown)
                $formIntuneMassGroupUpdat.remove_Load($formIntuneMassGroupUpdat_Load)
                $formIntuneMassGroupUpdat.remove_Load($Form_StateCorrection_Load)
                $formIntuneMassGroupUpdat.remove_Closing($Form_StoreValues_Closing)
                $formIntuneMassGroupUpdat.remove_FormClosed($Form_Cleanup_FormClosed)
            }
            catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
        }
        #endregion Generated Events
    
        #----------------------------------------------
        #region Generated Form Code
        #----------------------------------------------
        $formIntuneMassGroupUpdat.SuspendLayout()
        $tabcontrol1.SuspendLayout()
        $tabpage1.SuspendLayout()
        $tabpage2.SuspendLayout()
        $tabpage3.SuspendLayout()
        #
        # formIntuneMassGroupUpdat
        #
        $formIntuneMassGroupUpdat.Controls.Add($labelVersion)
        $formIntuneMassGroupUpdat.Controls.Add($buttonFilterChanges)
        $formIntuneMassGroupUpdat.Controls.Add($buttonFilterSelected)
        $formIntuneMassGroupUpdat.Controls.Add($buttonClearFilter)
        $formIntuneMassGroupUpdat.Controls.Add($buttonApplyFilter)
        $formIntuneMassGroupUpdat.Controls.Add($FNFilter)
        $formIntuneMassGroupUpdat.Controls.Add($SNFilter)
        $formIntuneMassGroupUpdat.Controls.Add($IGFilter)
        $formIntuneMassGroupUpdat.Controls.Add($CLFilter)
        $formIntuneMassGroupUpdat.Controls.Add($labelCustomLocation)
        $formIntuneMassGroupUpdat.Controls.Add($labelIntuneGroups)
        $formIntuneMassGroupUpdat.Controls.Add($labelSerialNumber)
        $formIntuneMassGroupUpdat.Controls.Add($labelFriendlyName)
        $formIntuneMassGroupUpdat.Controls.Add($labelFilters)
        $formIntuneMassGroupUpdat.Controls.Add($labelGroupList)
        $formIntuneMassGroupUpdat.Controls.Add($buttonReset)
        $formIntuneMassGroupUpdat.Controls.Add($buttonUploadToServiceNow)
        $formIntuneMassGroupUpdat.Controls.Add($buttonApplyToList)
        $formIntuneMassGroupUpdat.Controls.Add($checkboxOverwriteCurrentGrou)
        $formIntuneMassGroupUpdat.Controls.Add($checkedlistGroups)
        $formIntuneMassGroupUpdat.Controls.Add($datagridview1)
        $formIntuneMassGroupUpdat.Controls.Add($labelErrorMsg)
        $formIntuneMassGroupUpdat.Controls.Add($tabcontrol1)
        $formIntuneMassGroupUpdat.Controls.Add($buttonLogin)
        $formIntuneMassGroupUpdat.Controls.Add($labelPassword)
        $formIntuneMassGroupUpdat.Controls.Add($labelUsername)
        $formIntuneMassGroupUpdat.Controls.Add($txtPass)
        $formIntuneMassGroupUpdat.Controls.Add($txtUser)
        $formIntuneMassGroupUpdat.Controls.Add($panel1)
        $formIntuneMassGroupUpdat.AutoScaleDimensions = New-Object System.Drawing.SizeF(144, 144)
        $formIntuneMassGroupUpdat.AutoScaleMode = 'Dpi'
        $formIntuneMassGroupUpdat.AutoSize = $True
        $formIntuneMassGroupUpdat.ClientSize = New-Object System.Drawing.Size(1943, 929)
        $formIntuneMassGroupUpdat.FormBorderStyle = 'FixedSingle'
        #region Binary Data
        $Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
        $System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
    AAEAAAD/////AQAAAAAAAAAMAgAAAFFTeXN0ZW0uRHJhd2luZywgVmVyc2lvbj00LjAuMC4wLCBD
    dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EFAQAAABNTeXN0
    ZW0uRHJhd2luZy5JY29uAgAAAAhJY29uRGF0YQhJY29uU2l6ZQcEAhNTeXN0ZW0uRHJhd2luZy5T
    aXplAgAAAAIAAAAJAwAAAAX8////E1N5c3RlbS5EcmF3aW5nLlNpemUCAAAABXdpZHRoBmhlaWdo
    dAAACAgCAAAAAAAAAAAAAAAPAwAAAL4QAAACAAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAA
    QAAAAAEAIAAAAAAAABAAAMIOAADCDgAAAAAAAAAAAAD+/v7//v7+//79///+/v7//v7+//7+/v/+
    /v7//f39//7+/v/+//3//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+////+////+b/h2Az/3hM
    Ef98SxP/elMm//7/3/////7//v7+//7+/v/+/v7//v7+//7+/v/+/f//+/39//39/f/9/f3//v7+
    //7+/v/+/v7//f39//3////+/v7//v7+//7+/v/+/v7/+v7/////+//6/v///v7+/4NMD/+XTwH/
    mFUG/5dSAv+UUgH/lVMC/5VTAv+VUwL/lVEE/5hUAf+JTQv///fw///9+P/+/f///P7+//7+/v//
    /v7//Pz8//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/f///v/9//j9/v////v////j/4xO
    Av+OVAL/nFQA/4xSB/+XUwD/kVIB/5VTAv+VUwL/lVID/5RSAf+ZUwD/kFIG/5VTAv+SUwP/iFIR
    ////+//5/f7//v7+//7+/v/3/fz/Yz4Y////+f////7//fv6//39/f/8/v7////7//38///7+Pr/
    ///u/5hUAf+QUgT/lFID/5dTAP+YUQH/lFMC/5hTA/+QTgD/klAA/4RPDP+DUQ//kFAJ/5pRB/+Z
    WAP/j0oE/5pUAP+VUwL/jlAQ//z7///+//3//v7+/+j/+//k9v3//uDH/5RSA/+TUQL/gk8Q/5xr
    M/+MUAr/iU8N/5JSBP+VUQb/nFQA/49OA/+aVAH/n1QA/4VRD///9Nn////0//n8///8/v7//v7+
    ////+v///v3///z+//L//f//7N//klAB/5JPAP+VUQT/q4BV///+/f/+/v7/1vj3/yuvx//j////
    ///7/5lxQP+OTwX/l1IC/5pUAP+SUwP/lVMA/5RSA/+OUwT/xZ5x////+v////7/+vz9///9/f/4
    /f7////+//n9/v/5/f7///7+////+////P7/+v/+///5/v/6/v///+/S/5ZVAP+VUwD//v/9//7/
    /f9kr7j/LbXH/zWzxf9lxcv///////78+//6+v/////3///9+P///vr//Pv9//r//v/9/f3//v7+
    //7+/v/+/v7//v7+//v8+v8dHCD/Gxoe//n4/P///v7/8/77//b//P///v3///39///9///5//7/
    //7//5hNAP93Sxz////6/0uru/8oscH/I7HC/y6vwv82r8P/Taqz//n+///8/v7/+v7///79///+
    /f//9f/+//z+/////v3//v7+//z+/v////7///7///7+/v/7+/v//f/////9//8itb3/Nqi1/33B
    zv/z/P////////z//f/8/v//+fz//5ZRAf/4/fz/Sqy4/y+vwf8qr8P/L6/B/y6wwf8usb//LKy+
    /yq2vf88sbb/UbK2/4DI0P96wsr/Wq+5/zayuv8nt7z/QLa7//7+/v/+/v7//v3///7+/v/+/v7/
    +P79/y+wv/8usMH/LrDB/y6wwf8susX/Vq2x//n//v/+/v7////h///89/9Sqrj/LrDB/yyvw/8s
    sMH/L6+8/y6wwf8ssMH/NbC+/y+wv/8usMH/KLHB/yiyv/8lsr3/LLK+/zGwv/+p4+j///76///+
    /v/+/v7//v7+//7+/v/+/v7/Rq61/yywwf8usMH/LrDB/yyxv/8ssMH/I67I/1mztP/5/f7///38
    /53U4f84tMb/P67I/3jR3P8jssH/L7HC/y6wwf8usMH/LrDB/y2vwP8usMH/LrDB/y6wwf8usMH/
    Maq+///6///+/f///v7+//7+/v/+/v7//P7+///+/f/j////LK/C/y6wwf8usMH/LrDB/y6wwf8v
    sb7/Mq/E//79///+/v7/4f///x+qvf/u/f//t/r3/zuuw/8usMH/LrDB/y6wwf8vr8H/LrDB/y6w
    wf8usMH/LrDB/y6wwf8nsrv//P7////////+/v7//v7+//7+/v/+/v7/+v/+/+/7+/8tscL/LrDB
    /y6wwf8usMH/LrDB/y+vwf84sMP//v7+//7//f/2/v7///7+///+/f8wtMz/LrDB/y6wwf8vr8H/
    LLDB/yywwf8vr8H/LrDB/y6wwf8ssb//LLDB/3PEzP/3//7//v/9//7+/v/+/v7//v7+//7+/v//
    /P7////+/y6wwf8ur8L/LrDB/y6xv/8trsH/MbC//ymwwP/8/v7//v7+///9/f/y/fr/fMfJ/x6r
    vv8vr8H/LrDB/y6wwf8vrsP/Oa/C/yywwf8usMH/LrDB/yqyvv8irML/7fr8//n/+v/7/f7/qamp
    //7//f/8/v7////+//r//v/3//7/NbG8/y+vwf8usMH/L7G+/zGnuP8usb//I6/A//79///+/v7/
    +f/+//n+//8tqLz/M6/B/y2wvv8tr8D/LbHC/y6tvP9z0tz/Lq7B/y6wwf8usMH/J7DA/0awu///
    ////+/j6//n7+/9XVVv///7///7+/v8cGx3//f///////v+r7vf/Ja/B/yqxv/85rb7/9/77/y+0
    wv8trcL/+f7///7+/v/5/v//M7C+/y6vwv8usMH/LrDB/y+wv/8qrL3/aLfA/zyxuv8ssr7/LrDB
    /y6wwf8wsMP/9fz///7+/v8pJij/Gxga//79///+/v7//v7+/yEgIv8cGRv///////7+/v8qrsX/
    Kq7F/zqtt//7//r/4Pv//yqzw/+b2eH//P/9///+/f84sLz/LK+8/y6wwf8usMH/MbHE/0Wvtv//
    //r/JrO8/zOuwv8usMH/LrDB/zGzuv/0//3/mZaY/7u4uv///P7/+/r8//7+/v/+/v7//v7+//7+
    /v+JhIb//f39/zGxvv8zr8H/QrO9//7/+//5//r/4////zm2xf/7+/v///3//+v///8zqsP/ILO9
    /zavwv9RsL///v7+/////v82rcP/JbDA/yqyvv8vrMH/7P79//39/f/+/v7//v7+//7+/v/+/v7/
    /v7+///+/v/+/v7//v7+///////1////Wa62/y61t/8ysbn//P/9//7+/v/+/f///fz+/7Pj5P/8
    //3//////0yorf82utL/2f39//z//f///v7/5/r//yiwwv81rsH/Mq3J/z+qsf///v3//P/9//7+
    /v/+/v7//f////7+/v/+/v7//f39//7+/v/+/v7//v7+///8/v/3////HbLG/zSuvP/x+fj//v7+
    //7+/v/6//3///39///+/v/++/3/+v/+/+P08f///v//+/39///8/v99vsf/M67C/zOvwf/i//z/
    +fr4//X+///2/v3//v7+//79///+/v7//f39//7+/v/+/v7//v7+//7+/v///v7/+f/6//r//v/l
    ////MLDD///7///+/v7//v7+//z+///6//3//P7+//7+/v/+/v7//v7+//7+/v///f3///v//ySp
    t//2+P/////7//7+/v/+/v7///7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+
    //7+/v/+/v7///////7+/v//+///6Pf5//7+/v/+/v7//v7+//7//f/+/v7//v7+//7+/v/9////
    /v7+//n//v/9/f3/+//6///+/f/x//7//v/9//7+/v/+/v7//v7+//7+/v/+/v7//v/9//7//f/+
    /v7//v7+//7+/v/+/v7//v/9//7+/v/+/v7//v7+//L+/v/6//7//v/9//7+/v/8/v7//v7+//7+
    /v///////v7+//7+/v/+/v7//v7+/2S4vf8ztcb/PLDB/0autf/9////+f7///7+/v/+/v7//v7+
    //7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//P7+///+/v/u+ff/Qba9/zGxxv/8+///
    //z+//7//f/9/f3//v7+//7+/v/+/v7//v7+//7+/v///P7/LrDB/yGwv/8vscL///r///z//f/5
    //r//Pz8//v7+//+/f///v7+//7+/v/8/v7//v7+//7+/v/+/v7//f39//7+/v/+/v7//v7+///+
    /v8nucX/I7O+/9v////0//3//v7+///////+/v7//v7+//z+/v//+///8fz0/0air/8urcL/U6Ou
    //7+/v///v3/+/f8///////+/v7/6ejq//j4+P/+/v7//f39//7+/v/+/v7//v7+//7+/v/+/v7/
    /Pz8//7+/v/+/v7//v7+/4XX3P8ktcr/OKu4///+/f/8/v///P7+//39/f/+//3//f39//n/+v9b
    uMH/ZsDH///7///+/Pz//v/6///9//8aGR3///////7+/v/+/f//HRwe//3////+/f///v7+//7+
    /v/+/v7//v7+//7+/v///////v3///7+/v/+/v7/+v/+/y+krf8qscX//vr///7//f/+//3//v7+
    //39/f/6//7/+v7////++v/+/v7//v/7///8/v//+///9v79/yMiJv////////7+//n4/P9jXWL/
    IRsg/y0nLP8kICX/IR0i/yEgJP8cGx//IiEl//n4/P/+/v7///////7+/v//+////////yqpuP85
    tL7//P7+//7+/v///v7//v7+//7+/v/+/v7//v7+//39/f///v7//v7+///////+//3/IyAi/xsX
    HP/+/v7///7+//n5+f/6+f3/HBsf/yAcIf8iHiP/Ih4j/yIeI/8pKSn//v/9//7+/v/+/v7//v7+
    //7+/v/+/v7/9fz3/yKpsf/f+f/////7//7+/v/+/v7///7+//7+/v/+/v7//v7+//7+/v/+/v7/
    /v7+//7+/v93dnj/Ih4j/xQTF//+/v7//v/9//7+/v///v///Pv9/9TT1f9VVFb//v7+///////+
    /v7//v7+//3//////v7//v7+//7+/v//+///+f/+/8X0/P///P7//P7+//7+/v///v7//v7+//7+
    /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v8eHSH/Ih4j/yYiJ//+/v7////////////+/v7//v7+
    //7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+//3//v7+//7+/v/+/v7//v7+//7+/v/8/v7/
    /v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v/9/8/O0P8bFx3/Ih4j/yIeI/8c
    GRv///z+///9/f/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v3///7+/v/+/v7//v7+//7+
    /v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/f///v7+//7+/v/+/v7//f39
    //7+/v8hISH/ZGFj//j4+P/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7//v7+//7+/v/+/v7/
    /v7+//7+/v///v7///38//7+/v/+/v7/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL'))
        #endregion
        $formIntuneMassGroupUpdat.Icon = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
        $Formatter_binaryFomatter = $null
        $System_IO_MemoryStream = $null
        $formIntuneMassGroupUpdat.Margin = '3, 3, 3, 3'
        $formIntuneMassGroupUpdat.MaximizeBox = $False
        $formIntuneMassGroupUpdat.Name = 'formIntuneMassGroupUpdat'
        $formIntuneMassGroupUpdat.Text = 'Intune Mass Group Updater'
        $formIntuneMassGroupUpdat.add_Load($formIntuneMassGroupUpdat_Load)
        #
        # labelVersion
        #
        $labelVersion.AutoSize = $True
        $labelVersion.Location = New-Object System.Drawing.Point(1815, 872)
        $labelVersion.Margin = '5, 0, 5, 0'
        $labelVersion.Name = 'labelVersion'
        $labelVersion.Size = New-Object System.Drawing.Size(114, 20)
        $labelVersion.TabIndex = 41
        $labelVersion.Text = 'Version: Error'
        #
        # buttonFilterChanges
        #
        $buttonFilterChanges.Enabled = $False
        $buttonFilterChanges.Location = New-Object System.Drawing.Point(22, 765)
        $buttonFilterChanges.Margin = '5, 5, 5, 5'
        $buttonFilterChanges.Name = 'buttonFilterChanges'
        $buttonFilterChanges.Size = New-Object System.Drawing.Size(414, 35)
        $buttonFilterChanges.TabIndex = 40
        $buttonFilterChanges.Text = 'Filter Changes'
        $buttonFilterChanges.UseVisualStyleBackColor = $True
        $buttonFilterChanges.add_Click($buttonFilterChanges_Click)
        #
        # buttonFilterSelected
        #
        $buttonFilterSelected.Enabled = $False
        $buttonFilterSelected.Location = New-Object System.Drawing.Point(157, 720)
        $buttonFilterSelected.Margin = '5, 5, 5, 5'
        $buttonFilterSelected.Name = 'buttonFilterSelected'
        $buttonFilterSelected.Size = New-Object System.Drawing.Size(144, 35)
        $buttonFilterSelected.TabIndex = 38
        $buttonFilterSelected.Text = 'Filter Selected'
        $buttonFilterSelected.UseVisualStyleBackColor = $True
        $buttonFilterSelected.add_Click($buttonFilterSelected_Click)
        #
        # buttonClearFilter
        #
        $buttonClearFilter.Enabled = $False
        $buttonClearFilter.Location = New-Object System.Drawing.Point(311, 720)
        $buttonClearFilter.Margin = '5, 5, 5, 5'
        $buttonClearFilter.Name = 'buttonClearFilter'
        $buttonClearFilter.Size = New-Object System.Drawing.Size(125, 35)
        $buttonClearFilter.TabIndex = 37
        $buttonClearFilter.Text = 'Clear Filter'
        $buttonClearFilter.UseVisualStyleBackColor = $True
        $buttonClearFilter.add_Click($buttonClearFilter_Click)
        #
        # buttonApplyFilter
        #
        $buttonApplyFilter.Enabled = $False
        $buttonApplyFilter.Location = New-Object System.Drawing.Point(22, 720)
        $buttonApplyFilter.Margin = '5, 5, 5, 5'
        $buttonApplyFilter.Name = 'buttonApplyFilter'
        $buttonApplyFilter.Size = New-Object System.Drawing.Size(125, 35)
        $buttonApplyFilter.TabIndex = 36
        $buttonApplyFilter.Text = 'Apply Filter'
        $buttonApplyFilter.UseVisualStyleBackColor = $True
        $buttonApplyFilter.add_Click($buttonApplyFilter_Click)
        #
        # FNFilter
        #
        $FNFilter.Enabled = $False
        $FNFilter.Location = New-Object System.Drawing.Point(168, 359)
        $FNFilter.Margin = '5, 5, 5, 5'
        $FNFilter.Name = 'FNFilter'
        $FNFilter.Size = New-Object System.Drawing.Size(268, 26)
        $FNFilter.TabIndex = 35
        $FNFilter.add_KeyDown($FNFilter_KeyDown)
        #
        # SNFilter
        #
        $SNFilter.Enabled = $False
        $SNFilter.Location = New-Object System.Drawing.Point(168, 439)
        $SNFilter.Margin = '5, 5, 5, 5'
        $SNFilter.Name = 'SNFilter'
        $SNFilter.Size = New-Object System.Drawing.Size(268, 26)
        $SNFilter.TabIndex = 34
        $SNFilter.add_KeyDown($SNFilter_KeyDown)
        #
        # IGFilter
        #
        $IGFilter.Enabled = $False
        $IGFilter.Location = New-Object System.Drawing.Point(168, 519)
        $IGFilter.Margin = '5, 5, 5, 5'
        $IGFilter.Name = 'IGFilter'
        $IGFilter.Size = New-Object System.Drawing.Size(268, 26)
        $IGFilter.TabIndex = 33
        $IGFilter.add_KeyDown($IGFilter_KeyDown)
        #
        # CLFilter
        #
        $CLFilter.Enabled = $False
        $CLFilter.Location = New-Object System.Drawing.Point(168, 599)
        $CLFilter.Margin = '5, 5, 5, 5'
        $CLFilter.Name = 'CLFilter'
        $CLFilter.Size = New-Object System.Drawing.Size(268, 26)
        $CLFilter.TabIndex = 32
        $CLFilter.add_KeyDown($CLFilter_KeyDown)
        #
        # labelCustomLocation
        #
        $labelCustomLocation.AutoSize = $True
        $labelCustomLocation.BackColor = [System.Drawing.SystemColors]::ScrollBar 
        $labelCustomLocation.Location = New-Object System.Drawing.Point(22, 602)
        $labelCustomLocation.Margin = '5, 0, 5, 0'
        $labelCustomLocation.Name = 'labelCustomLocation'
        $labelCustomLocation.Size = New-Object System.Drawing.Size(136, 20)
        $labelCustomLocation.TabIndex = 31
        $labelCustomLocation.Text = 'Custom Location'
        #
        # labelIntuneGroups
        #
        $labelIntuneGroups.AutoSize = $True
        $labelIntuneGroups.BackColor = [System.Drawing.SystemColors]::ScrollBar 
        $labelIntuneGroups.Location = New-Object System.Drawing.Point(22, 522)
        $labelIntuneGroups.Margin = '5, 0, 5, 0'
        $labelIntuneGroups.Name = 'labelIntuneGroups'
        $labelIntuneGroups.Size = New-Object System.Drawing.Size(114, 20)
        $labelIntuneGroups.TabIndex = 30
        $labelIntuneGroups.Text = 'Intune Groups'
        #
        # labelSerialNumber
        #
        $labelSerialNumber.AutoSize = $True
        $labelSerialNumber.BackColor = [System.Drawing.SystemColors]::ScrollBar 
        $labelSerialNumber.Location = New-Object System.Drawing.Point(22, 442)
        $labelSerialNumber.Margin = '5, 0, 5, 0'
        $labelSerialNumber.Name = 'labelSerialNumber'
        $labelSerialNumber.Size = New-Object System.Drawing.Size(116, 20)
        $labelSerialNumber.TabIndex = 29
        $labelSerialNumber.Text = 'Serial Number'
        #
        # labelFriendlyName
        #
        $labelFriendlyName.AutoSize = $True
        $labelFriendlyName.BackColor = [System.Drawing.SystemColors]::ScrollBar 
        $labelFriendlyName.Location = New-Object System.Drawing.Point(22, 362)
        $labelFriendlyName.Margin = '5, 0, 5, 0'
        $labelFriendlyName.Name = 'labelFriendlyName'
        $labelFriendlyName.Size = New-Object System.Drawing.Size(117, 20)
        $labelFriendlyName.TabIndex = 28
        $labelFriendlyName.Text = 'Friendly Name'
        #
        # labelFilters
        #
        $labelFilters.AutoSize = $True
        $labelFilters.BackColor = [System.Drawing.SystemColors]::ScrollBar 
        $labelFilters.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '10')
        $labelFilters.Location = New-Object System.Drawing.Point(22, 282)
        $labelFilters.Margin = '5, 0, 5, 0'
        $labelFilters.Name = 'labelFilters'
        $labelFilters.Size = New-Object System.Drawing.Size(64, 25)
        $labelFilters.TabIndex = 27
        $labelFilters.Text = 'Filters'
        #
        # labelGroupList
        #
        $labelGroupList.AutoSize = $True
        $labelGroupList.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '10')
        $labelGroupList.Location = New-Object System.Drawing.Point(462, 278)
        $labelGroupList.Margin = '8, 0, 8, 0'
        $labelGroupList.Name = 'labelGroupList'
        $labelGroupList.Size = New-Object System.Drawing.Size(101, 25)
        $labelGroupList.TabIndex = 25
        $labelGroupList.Text = 'Group List'
        #
        # buttonReset
        #
        $buttonReset.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '12')
        $buttonReset.Location = New-Object System.Drawing.Point(272, 832)
        $buttonReset.Margin = '5, 5, 5, 5'
        $buttonReset.Name = 'buttonReset'
        $buttonReset.Size = New-Object System.Drawing.Size(368, 60)
        $buttonReset.TabIndex = 24
        $buttonReset.Text = 'Reset'
        $buttonReset.UseVisualStyleBackColor = $True
        $buttonReset.add_Click($buttonReset_Click)
        #
        # buttonUploadToServiceNow
        #
        $buttonUploadToServiceNow.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '12')
        $buttonUploadToServiceNow.Location = New-Object System.Drawing.Point(1240, 832)
        $buttonUploadToServiceNow.Margin = '5, 5, 5, 5'
        $buttonUploadToServiceNow.Name = 'buttonUploadToServiceNow'
        $buttonUploadToServiceNow.Size = New-Object System.Drawing.Size(368, 60)
        $buttonUploadToServiceNow.TabIndex = 23
        $buttonUploadToServiceNow.Text = 'Upload to ServiceNow'
        $buttonUploadToServiceNow.UseVisualStyleBackColor = $True
        $buttonUploadToServiceNow.add_Click($buttonUploadToServiceNow_Click)
        #
        # buttonApplyToList
        #
        $buttonApplyToList.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '9')
        $buttonApplyToList.Location = New-Object System.Drawing.Point(719, 767)
        $buttonApplyToList.Margin = '5, 5, 5, 5'
        $buttonApplyToList.Name = 'buttonApplyToList'
        $buttonApplyToList.Size = New-Object System.Drawing.Size(192, 45)
        $buttonApplyToList.TabIndex = 22
        $buttonApplyToList.Text = 'Apply to List'
        $buttonApplyToList.UseVisualStyleBackColor = $True
        $buttonApplyToList.add_Click($buttonApplyToList_Click)
        #
        # checkboxOverwriteCurrentGrou
        #
        $checkboxOverwriteCurrentGrou.Location = New-Object System.Drawing.Point(462, 772)
        $checkboxOverwriteCurrentGrou.Margin = '5, 5, 5, 5'
        $checkboxOverwriteCurrentGrou.Name = 'checkboxOverwriteCurrentGrou'
        $checkboxOverwriteCurrentGrou.Size = New-Object System.Drawing.Size(257, 37)
        $checkboxOverwriteCurrentGrou.TabIndex = 21
        $checkboxOverwriteCurrentGrou.Text = 'Overwrite Current Groups'
        $checkboxOverwriteCurrentGrou.UseVisualStyleBackColor = $True
        #
        # checkedlistGroups
        #
        $checkedlistGroups.CheckOnClick = $True
        $checkedlistGroups.FormattingEnabled = $True
        $checkedlistGroups.Location = New-Object System.Drawing.Point(462, 315)
        $checkedlistGroups.Margin = '8, 8, 8, 8'
        $checkedlistGroups.Name = 'checkedlistGroups'
        $checkedlistGroups.Size = New-Object System.Drawing.Size(449, 445)
        $checkedlistGroups.TabIndex = 20
        #
        # datagridview1
        #
        $datagridview1.AllowUserToAddRows = $False
        $datagridview1.AllowUserToDeleteRows = $False
        $datagridview1.ColumnHeadersHeightSizeMode = 'AutoSize'
        $datagridview1.Location = New-Object System.Drawing.Point(925, 18)
        $datagridview1.Margin = '5, 5, 5, 5'
        $datagridview1.Name = 'datagridview1'
        $datagridview1.ReadOnly = $True
        $datagridview1.RowTemplate.Height = 28
        $datagridview1.Size = New-Object System.Drawing.Size(998, 794)
        $datagridview1.TabIndex = 19
        $datagridview1.add_CellMouseUp($datagridview1_CellMouseUp)
        $datagridview1.add_Sorted($datagridview1_Sorted)
        #
        # labelErrorMsg
        #
        $labelErrorMsg.AutoSize = $True
        $labelErrorMsg.Location = New-Object System.Drawing.Point(390, 14)
        $labelErrorMsg.Margin = '8, 0, 8, 0'
        $labelErrorMsg.Name = 'labelErrorMsg'
        $labelErrorMsg.Size = New-Object System.Drawing.Size(292, 20)
        $labelErrorMsg.TabIndex = 18
        $labelErrorMsg.Text = 'For more information, see KB0022514'
        #
        # tabcontrol1
        #
        $tabcontrol1.Controls.Add($tabpage1)
        $tabcontrol1.Controls.Add($tabpage2)
        $tabcontrol1.Controls.Add($tabpage3)
        $tabcontrol1.Enabled = $False
        $tabcontrol1.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '12')
        $tabcontrol1.Location = New-Object System.Drawing.Point(18, 117)
        $tabcontrol1.Margin = '5, 5, 5, 5'
        $tabcontrol1.Name = 'tabcontrol1'
        $tabcontrol1.SelectedIndex = 0
        $tabcontrol1.Size = New-Object System.Drawing.Size(897, 160)
        $tabcontrol1.TabIndex = 17
        #
        # tabpage1
        #
        $tabpage1.Controls.Add($labelExampleRITM0027585)
        $tabpage1.Controls.Add($labelEnterTheRITMNumberOf)
        $tabpage1.Controls.Add($buttonSearchSN)
        $tabpage1.Controls.Add($txtRITMSearch)
        $tabpage1.Controls.Add($labelRITM)
        $tabpage1.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8')
        $tabpage1.Location = New-Object System.Drawing.Point(4, 38)
        $tabpage1.Margin = '5, 5, 5, 5'
        $tabpage1.Name = 'tabpage1'
        $tabpage1.Padding = '3, 3, 3, 3'
        $tabpage1.Size = New-Object System.Drawing.Size(889, 118)
        $tabpage1.TabIndex = 0
        $tabpage1.Text = 'Shop Order'
        $tabpage1.UseVisualStyleBackColor = $True
        #
        # labelExampleRITM0027585
        #
        $labelExampleRITM0027585.AutoSize = $True
        $labelExampleRITM0027585.Location = New-Object System.Drawing.Point(8, 85)
        $labelExampleRITM0027585.Margin = '8, 0, 8, 0'
        $labelExampleRITM0027585.Name = 'labelExampleRITM0027585'
        $labelExampleRITM0027585.Size = New-Object System.Drawing.Size(184, 20)
        $labelExampleRITM0027585.TabIndex = 19
        $labelExampleRITM0027585.Text = 'Example: RITM0027585.'
        #
        # labelEnterTheRITMNumberOf
        #
        $labelEnterTheRITMNumberOf.AutoSize = $True
        $labelEnterTheRITMNumberOf.Location = New-Object System.Drawing.Point(8, 62)
        $labelEnterTheRITMNumberOf.Margin = '8, 0, 8, 0'
        $labelEnterTheRITMNumberOf.Name = 'labelEnterTheRITMNumberOf'
        $labelEnterTheRITMNumberOf.Size = New-Object System.Drawing.Size(578, 20)
        $labelEnterTheRITMNumberOf.TabIndex = 18
        $labelEnterTheRITMNumberOf.Text = 'Enter the RITM number of the assets you wish to change and press "Search SN"'
        #
        # buttonSearchSN
        #
        $buttonSearchSN.Location = New-Object System.Drawing.Point(750, 70)
        $buttonSearchSN.Margin = '5, 5, 5, 5'
        $buttonSearchSN.Name = 'buttonSearchSN'
        $buttonSearchSN.Size = New-Object System.Drawing.Size(125, 35)
        $buttonSearchSN.TabIndex = 18
        $buttonSearchSN.Text = 'Search SN'
        $buttonSearchSN.UseVisualStyleBackColor = $True
        $buttonSearchSN.add_Click($buttonSearchSN_Click)
        #
        # txtRITMSearch
        #
        $txtRITMSearch.Cursor = 'IBeam'
        $txtRITMSearch.Location = New-Object System.Drawing.Point(137, 12)
        $txtRITMSearch.Margin = '5, 5, 5, 5'
        $txtRITMSearch.Name = 'txtRITMSearch'
        $txtRITMSearch.Size = New-Object System.Drawing.Size(286, 26)
        $txtRITMSearch.TabIndex = 1
        $txtRITMSearch.Text = 'RITM'
        $txtRITMSearch.add_KeyDown($txtRITMSearch_KeyDown)
        #
        # labelRITM
        #
        $labelRITM.AutoSize = $True
        $labelRITM.Location = New-Object System.Drawing.Point(7, 17)
        $labelRITM.Margin = '5, 0, 5, 0'
        $labelRITM.Name = 'labelRITM'
        $labelRITM.Size = New-Object System.Drawing.Size(108, 20)
        $labelRITM.TabIndex = 0
        $labelRITM.Text = 'RITM Number'
        #
        # tabpage2
        #
        $tabpage2.Controls.Add($labelExampleCTempExampleF)
        $tabpage2.Controls.Add($labelEnterThePathorPressB)
        $tabpage2.Controls.Add($buttonBrowse)
        $tabpage2.Controls.Add($buttonUploadFile)
        $tabpage2.Controls.Add($txtFilePath)
        $tabpage2.Controls.Add($labelFilePath)
        $tabpage2.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8')
        $tabpage2.Location = New-Object System.Drawing.Point(4, 38)
        $tabpage2.Margin = '5, 5, 5, 5'
        $tabpage2.Name = 'tabpage2'
        $tabpage2.Padding = '3, 3, 3, 3'
        $tabpage2.Size = New-Object System.Drawing.Size(889, 118)
        $tabpage2.TabIndex = 1
        $tabpage2.Text = 'File Upload'
        $tabpage2.UseVisualStyleBackColor = $True
        #
        # labelExampleCTempExampleF
        #
        $labelExampleCTempExampleF.AutoSize = $True
        $labelExampleCTempExampleF.Location = New-Object System.Drawing.Point(8, 85)
        $labelExampleCTempExampleF.Margin = '8, 0, 8, 0'
        $labelExampleCTempExampleF.Name = 'labelExampleCTempExampleF'
        $labelExampleCTempExampleF.Size = New-Object System.Drawing.Size(324, 20)
        $labelExampleCTempExampleF.TabIndex = 5
        $labelExampleCTempExampleF.Text = 'Example: C:\Temp\Example Folder\Serials.txt'
        #
        # labelEnterThePathorPressB
        #
        $labelEnterThePathorPressB.AutoSize = $True
        $labelEnterThePathorPressB.Location = New-Object System.Drawing.Point(8, 62)
        $labelEnterThePathorPressB.Margin = '8, 0, 8, 0'
        $labelEnterThePathorPressB.Name = 'labelEnterThePathorPressB'
        $labelEnterThePathorPressB.Size = New-Object System.Drawing.Size(441, 20)
        $labelEnterThePathorPressB.TabIndex = 4
        $labelEnterThePathorPressB.Text = 'Enter the path (or press Browse and select) a CSV or TXT file'
        #
        # buttonBrowse
        #
        $buttonBrowse.Location = New-Object System.Drawing.Point(750, 9)
        $buttonBrowse.Margin = '5, 5, 5, 5'
        $buttonBrowse.Name = 'buttonBrowse'
        $buttonBrowse.Size = New-Object System.Drawing.Size(125, 35)
        $buttonBrowse.TabIndex = 3
        $buttonBrowse.Text = 'Browse'
        $buttonBrowse.UseVisualStyleBackColor = $True
        $buttonBrowse.add_Click($buttonBrowse_Click)
        #
        # buttonUploadFile
        #
        $buttonUploadFile.Location = New-Object System.Drawing.Point(750, 70)
        $buttonUploadFile.Margin = '5, 5, 5, 5'
        $buttonUploadFile.Name = 'buttonUploadFile'
        $buttonUploadFile.Size = New-Object System.Drawing.Size(125, 35)
        $buttonUploadFile.TabIndex = 2
        $buttonUploadFile.Text = 'Upload File'
        $buttonUploadFile.UseVisualStyleBackColor = $True
        $buttonUploadFile.add_Click($buttonUploadFile_Click)
        #
        # txtFilePath
        #
        $txtFilePath.Location = New-Object System.Drawing.Point(98, 12)
        $txtFilePath.Margin = '8, 8, 8, 8'
        $txtFilePath.Name = 'txtFilePath'
        $txtFilePath.Size = New-Object System.Drawing.Size(639, 26)
        $txtFilePath.TabIndex = 1
        $txtFilePath.add_KeyDown($txtFilePath_KeyDown)
        #
        # labelFilePath
        #
        $labelFilePath.AutoSize = $True
        $labelFilePath.Location = New-Object System.Drawing.Point(8, 17)
        $labelFilePath.Margin = '8, 0, 8, 0'
        $labelFilePath.Name = 'labelFilePath'
        $labelFilePath.Size = New-Object System.Drawing.Size(71, 20)
        $labelFilePath.TabIndex = 0
        $labelFilePath.Text = 'File Path'
        #
        # tabpage3
        #
        $tabpage3.Controls.Add($buttonSelectLocation)
        $tabpage3.Controls.Add($combobox1)
        $tabpage3.Controls.Add($labelLocation)
        $tabpage3.Controls.Add($labelYouCanStartTypingToJ)
        $tabpage3.Controls.Add($labelSelectTheSiteFromThe)
        $tabpage3.Location = New-Object System.Drawing.Point(4, 38)
        $tabpage3.Margin = '5, 5, 5, 5'
        $tabpage3.Name = 'tabpage3'
        $tabpage3.Padding = '3, 3, 3, 3'
        $tabpage3.Size = New-Object System.Drawing.Size(889, 118)
        $tabpage3.TabIndex = 2
        $tabpage3.Text = 'Location'
        $tabpage3.UseVisualStyleBackColor = $True
        #
        # buttonSelectLocation
        #
        $buttonSelectLocation.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8')
        $buttonSelectLocation.Location = New-Object System.Drawing.Point(697, 70)
        $buttonSelectLocation.Margin = '5, 5, 5, 5'
        $buttonSelectLocation.Name = 'buttonSelectLocation'
        $buttonSelectLocation.Size = New-Object System.Drawing.Size(178, 35)
        $buttonSelectLocation.TabIndex = 5
        $buttonSelectLocation.Text = 'Select Location'
        $buttonSelectLocation.UseVisualStyleBackColor = $True
        $buttonSelectLocation.add_Click($buttonSelectLocation_Click)
        #
        # combobox1
        #
        $combobox1.FormattingEnabled = $True
        $combobox1.Location = New-Object System.Drawing.Point(88, 8)
        $combobox1.Margin = '5, 5, 5, 5'
        $combobox1.Name = 'combobox1'
        $combobox1.Size = New-Object System.Drawing.Size(787, 37)
        $combobox1.TabIndex = 4
        $combobox1.add_KeyDown($combobox1_KeyDown)
        #
        # labelLocation
        #
        $labelLocation.AutoSize = $True
        $labelLocation.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8')
        $labelLocation.Location = New-Object System.Drawing.Point(8, 18)
        $labelLocation.Margin = '5, 0, 5, 0'
        $labelLocation.Name = 'labelLocation'
        $labelLocation.Size = New-Object System.Drawing.Size(70, 20)
        $labelLocation.TabIndex = 3
        $labelLocation.Text = 'Location'
        #
        # labelYouCanStartTypingToJ
        #
        $labelYouCanStartTypingToJ.AutoSize = $True
        $labelYouCanStartTypingToJ.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8')
        $labelYouCanStartTypingToJ.Location = New-Object System.Drawing.Point(8, 85)
        $labelYouCanStartTypingToJ.Margin = '5, 0, 5, 0'
        $labelYouCanStartTypingToJ.Name = 'labelYouCanStartTypingToJ'
        $labelYouCanStartTypingToJ.Size = New-Object System.Drawing.Size(436, 20)
        $labelYouCanStartTypingToJ.TabIndex = 2
        $labelYouCanStartTypingToJ.Text = 'You can start typing to jump to that location in the dropdown.'
        #
        # labelSelectTheSiteFromThe
        #
        $labelSelectTheSiteFromThe.AutoSize = $True
        $labelSelectTheSiteFromThe.Font = [System.Drawing.Font]::new('Microsoft Sans Serif', '8')
        $labelSelectTheSiteFromThe.Location = New-Object System.Drawing.Point(8, 62)
        $labelSelectTheSiteFromThe.Margin = '5, 0, 5, 0'
        $labelSelectTheSiteFromThe.Name = 'labelSelectTheSiteFromThe'
        $labelSelectTheSiteFromThe.Size = New-Object System.Drawing.Size(251, 20)
        $labelSelectTheSiteFromThe.TabIndex = 1
        $labelSelectTheSiteFromThe.Text = 'Select the site from the dropdown.'
        #
        # buttonLogin
        #
        $buttonLogin.Location = New-Object System.Drawing.Point(390, 47)
        $buttonLogin.Margin = '5, 5, 5, 5'
        $buttonLogin.Name = 'buttonLogin'
        $buttonLogin.Size = New-Object System.Drawing.Size(182, 35)
        $buttonLogin.TabIndex = 16
        $buttonLogin.Text = 'Login'
        $buttonLogin.UseCompatibleTextRendering = $True
        $buttonLogin.UseVisualStyleBackColor = $True
        $buttonLogin.add_Click($buttonLogin_Click)
        #
        # labelPassword
        #
        $labelPassword.AutoSize = $True
        $labelPassword.Location = New-Object System.Drawing.Point(18, 54)
        $labelPassword.Margin = '5, 0, 5, 0'
        $labelPassword.Name = 'labelPassword'
        $labelPassword.Size = New-Object System.Drawing.Size(85, 24)
        $labelPassword.TabIndex = 15
        $labelPassword.Text = 'Password:'
        $labelPassword.UseCompatibleTextRendering = $True
        #
        # labelUsername
        #
        $labelUsername.AutoSize = $True
        $labelUsername.Location = New-Object System.Drawing.Point(18, 14)
        $labelUsername.Margin = '5, 0, 5, 0'
        $labelUsername.Name = 'labelUsername'
        $labelUsername.Size = New-Object System.Drawing.Size(89, 24)
        $labelUsername.TabIndex = 14
        $labelUsername.Text = 'Username:'
        $labelUsername.UseCompatibleTextRendering = $True
        #
        # txtPass
        #
        $txtPass.Location = New-Object System.Drawing.Point(125, 51)
        $txtPass.Margin = '5, 5, 5, 5'
        $txtPass.Name = 'txtPass'
        $txtPass.PasswordChar = '*'
        $txtPass.Size = New-Object System.Drawing.Size(232, 26)
        $txtPass.TabIndex = 13
        $txtPass.add_KeyDown($txtPass_KeyDown)
        #
        # txtUser
        #
        $txtUser.Location = New-Object System.Drawing.Point(125, 9)
        $txtUser.Margin = '5, 5, 5, 5'
        $txtUser.Name = 'txtUser'
        $txtUser.Size = New-Object System.Drawing.Size(232, 26)
        $txtUser.TabIndex = 12
        #
        # panel1
        #
        $panel1.BackColor = [System.Drawing.SystemColors]::ScrollBar 
        $panel1.BorderStyle = 'FixedSingle'
        $panel1.Location = New-Object System.Drawing.Point(14, 278)
        $panel1.Margin = '5, 5, 5, 5'
        $panel1.Name = 'panel1'
        $panel1.Size = New-Object System.Drawing.Size(438, 531)
        $panel1.TabIndex = 42
        #
        # openfiledialog1
        #
        $openfiledialog1.FileName = 'openfiledialog1'
        $tabpage3.ResumeLayout()
        $tabpage2.ResumeLayout()
        $tabpage1.ResumeLayout()
        $tabcontrol1.ResumeLayout()
        $formIntuneMassGroupUpdat.ResumeLayout()
        #endregion Generated Form Code
    
        #----------------------------------------------
    
        #Save the initial state of the form
        $InitialFormWindowState = $formIntuneMassGroupUpdat.WindowState
        #Init the OnLoad event to correct the initial state of the form
        $formIntuneMassGroupUpdat.add_Load($Form_StateCorrection_Load)
        #Clean up the control events
        $formIntuneMassGroupUpdat.add_FormClosed($Form_Cleanup_FormClosed)
        #Store the control values when form is closing
        $formIntuneMassGroupUpdat.add_Closing($Form_StoreValues_Closing)
        #Show the Form
        return $formIntuneMassGroupUpdat.ShowDialog()
    
    }
    #endregion Source: MainForm.psf
    
    #Start the application
    Main ($CommandLine)
    